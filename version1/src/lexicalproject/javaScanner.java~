/* The following code was generated by JFlex 1.4.3 on 11/24/21 9:31 AM */

    //=>Definitions
    package lexicalproject;
    import static lexicalproject.JavaTokens.*;
    import java.util.Hashtable;
    import java.util.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/24/21 9:31 AM from the specification file
 * <tt>C:/Users/Adnan.DESKTOP-DBG87M9/Documents/NetBeansProjects/LexicalProject/src/lexicalproject/Lexical.flex</tt>
 */
class javaScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\6\1\0\1\5\1\7\22\0\1\5\1\16\1\1"+
    "\1\0\1\26\1\16\1\21\1\2\1\10\1\10\1\24\1\23\1\10"+
    "\1\20\1\11\1\25\1\37\1\44\2\52\4\40\2\3\1\12\1\10"+
    "\1\15\1\13\1\14\1\17\1\10\1\42\1\43\1\42\1\47\1\46"+
    "\1\47\5\26\1\45\6\26\1\71\4\26\1\41\2\26\1\10\1\4"+
    "\1\10\1\16\1\26\1\0\1\34\1\51\1\53\1\60\1\32\1\33"+
    "\1\63\1\57\1\55\1\26\1\62\1\35\1\67\1\50\1\54\1\61"+
    "\1\26\1\30\1\36\1\27\1\31\1\66\1\56\1\70\1\64\1\65"+
    "\1\10\1\22\1\10\1\17\1\0\u0329\0\1\0\u1c7c\0\1\72\udfd8\0"+
    "\1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\2\3\2\4\12\5\10\6\1\2"+
    "\14\6\1\1\1\0\1\7\3\0\1\10\1\0\1\10"+
    "\1\2\2\0\1\3\22\6\1\0\1\2\2\0\13\6"+
    "\1\11\4\6\1\11\7\6\1\12\1\7\1\0\1\13"+
    "\2\0\1\10\2\0\24\6\2\2\7\6\1\11\16\6"+
    "\1\0\1\14\11\6\1\15\15\6\1\0\1\6\1\11"+
    "\1\6\1\11\14\6\1\0\12\6\1\16\14\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\73"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\73\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\73\0\73\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u03b0\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\73\0\73\0\u156f\0\73\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u03b0\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\u03b0\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u1782\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\73\0\u2c7b\0\u2cb6"+
    "\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e"+
    "\0\u2ec9\0\u2f04";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\2\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\13\1\16\1\17"+
    "\1\20\1\21\1\22\1\13\1\23\1\24\1\25\1\26"+
    "\1\24\1\27\1\30\1\31\1\32\1\33\1\34\1\5"+
    "\3\24\1\5\3\24\1\35\1\36\1\5\1\37\1\40"+
    "\1\41\1\42\1\24\1\43\1\44\1\24\1\45\2\24"+
    "\1\46\1\47\1\24\1\50\1\51\73\0\1\52\1\53"+
    "\2\52\1\54\1\52\2\0\63\52\2\55\1\0\1\55"+
    "\1\56\1\55\2\0\63\55\3\0\1\5\5\0\1\57"+
    "\20\0\1\60\1\61\1\0\1\62\1\0\2\5\3\0"+
    "\1\5\1\62\1\60\1\61\2\0\1\5\5\0\1\61"+
    "\20\0\1\6\67\0\1\57\5\0\1\63\25\0\2\57"+
    "\3\0\1\57\5\0\1\57\32\0\1\10\1\16\72\0"+
    "\1\16\72\0\2\16\71\0\1\16\1\0\1\16\70\0"+
    "\2\16\3\0\1\16\65\0\1\16\5\0\1\16\64\0"+
    "\1\16\6\0\1\16\63\0\1\16\7\0\1\16\62\0"+
    "\1\16\10\0\1\64\1\65\50\0\1\24\22\0\44\24"+
    "\4\0\1\24\22\0\2\24\1\66\26\24\1\67\12\24"+
    "\4\0\1\24\22\0\4\24\1\70\37\24\4\0\1\24"+
    "\22\0\7\24\1\71\12\24\1\72\17\24\1\73\1\24"+
    "\4\0\1\24\22\0\6\24\1\74\1\75\16\24\1\76"+
    "\1\77\14\24\4\0\1\24\22\0\10\24\1\100\12\24"+
    "\1\101\20\24\4\0\1\24\22\0\26\24\1\102\15\24"+
    "\4\0\1\24\22\0\1\24\1\103\1\24\1\104\24\24"+
    "\1\105\1\106\4\24\1\107\5\24\4\0\1\110\5\0"+
    "\1\57\20\0\1\60\1\61\1\0\1\62\1\0\2\111"+
    "\1\112\1\0\1\113\1\111\1\62\1\60\1\61\1\0"+
    "\1\113\1\111\5\0\1\61\7\0\1\112\5\0\1\24"+
    "\22\0\3\24\1\114\1\115\1\24\1\116\35\24\4\0"+
    "\1\24\22\0\2\24\1\117\23\24\1\120\7\24\1\121"+
    "\5\24\4\0\1\24\22\0\6\24\1\122\1\123\16\24"+
    "\1\124\2\24\1\125\12\24\4\0\1\24\22\0\3\24"+
    "\1\126\40\24\4\0\1\24\22\0\5\24\1\127\14\24"+
    "\1\130\16\24\1\131\2\24\4\0\1\24\22\0\31\24"+
    "\1\132\12\24\4\0\1\24\22\0\4\24\1\133\21\24"+
    "\1\134\15\24\4\0\1\24\22\0\2\24\1\135\1\136"+
    "\2\24\1\137\35\24\4\0\1\24\22\0\26\24\1\140"+
    "\15\24\4\0\1\24\22\0\26\24\1\141\15\24\4\0"+
    "\1\24\22\0\6\24\1\142\35\24\4\0\1\24\22\0"+
    "\1\24\1\143\42\24\22\0\1\144\51\0\1\52\1\145"+
    "\2\52\1\54\1\52\2\0\63\52\1\0\1\146\72\0"+
    "\2\52\1\0\1\52\22\0\2\52\2\0\1\52\3\0"+
    "\2\52\3\0\1\52\3\0\3\52\22\0\1\147\71\0"+
    "\2\55\1\0\1\55\22\0\2\55\2\0\1\55\3\0"+
    "\1\150\1\151\3\0\1\150\3\0\2\55\1\150\23\0"+
    "\1\57\26\0\1\60\1\61\3\0\2\57\3\0\1\57"+
    "\1\0\1\60\1\61\2\0\1\57\5\0\1\61\15\0"+
    "\1\152\14\0\1\153\2\0\1\153\13\0\2\152\3\0"+
    "\1\152\5\0\1\152\31\0\1\10\61\0\24\64\1\154"+
    "\46\64\6\65\2\0\63\65\3\0\1\24\22\0\3\24"+
    "\1\155\2\24\1\156\27\24\1\127\5\24\4\0\1\24"+
    "\22\0\2\24\1\157\24\24\1\160\14\24\4\0\1\24"+
    "\22\0\1\24\1\161\42\24\4\0\1\24\22\0\10\24"+
    "\1\162\33\24\4\0\1\24\22\0\3\24\1\163\40\24"+
    "\4\0\1\24\22\0\1\24\1\164\42\24\4\0\1\24"+
    "\22\0\7\24\1\165\34\24\4\0\1\24\22\0\26\24"+
    "\1\166\15\24\4\0\1\24\22\0\2\24\1\127\41\24"+
    "\4\0\1\24\22\0\22\24\1\167\21\24\4\0\1\24"+
    "\22\0\10\24\1\170\33\24\4\0\1\24\22\0\10\24"+
    "\1\171\33\24\4\0\1\24\22\0\22\24\1\172\21\24"+
    "\4\0\1\24\22\0\2\24\1\173\3\24\1\174\35\24"+
    "\4\0\1\24\22\0\33\24\1\175\10\24\4\0\1\24"+
    "\22\0\27\24\1\176\14\24\4\0\1\24\22\0\26\24"+
    "\1\177\15\24\4\0\1\24\22\0\22\24\1\200\21\24"+
    "\4\0\1\110\5\0\1\57\20\0\1\60\1\61\3\0"+
    "\2\110\3\0\1\110\1\0\1\60\1\61\2\0\1\110"+
    "\5\0\1\61\15\0\1\110\5\0\1\57\20\0\1\60"+
    "\1\61\1\0\1\62\1\0\2\111\3\0\1\111\1\62"+
    "\1\60\1\61\2\0\1\111\5\0\1\61\15\0\1\201"+
    "\26\0\3\201\2\0\2\201\1\0\3\201\1\0\2\201"+
    "\1\0\3\201\4\0\1\201\51\0\1\202\4\0\1\202"+
    "\31\0\1\24\22\0\7\24\1\203\34\24\4\0\1\24"+
    "\22\0\30\24\1\127\13\24\4\0\1\24\22\0\1\24"+
    "\1\204\42\24\4\0\1\24\22\0\4\24\1\205\37\24"+
    "\4\0\1\24\22\0\26\24\1\206\15\24\4\0\1\24"+
    "\22\0\1\24\1\162\42\24\4\0\1\24\22\0\1\24"+
    "\1\207\6\24\1\162\33\24\4\0\1\24\22\0\6\24"+
    "\1\210\35\24\4\0\1\24\22\0\22\24\1\211\21\24"+
    "\4\0\1\24\22\0\6\24\1\76\35\24\4\0\1\24"+
    "\22\0\1\24\1\127\42\24\4\0\1\24\22\0\1\24"+
    "\1\212\6\24\1\213\33\24\4\0\1\24\22\0\33\24"+
    "\1\214\10\24\4\0\1\24\22\0\27\24\1\215\14\24"+
    "\4\0\1\24\22\0\5\24\1\216\36\24\4\0\1\24"+
    "\22\0\3\24\1\217\40\24\4\0\1\24\22\0\26\24"+
    "\1\220\1\221\14\24\4\0\1\24\22\0\23\24\1\222"+
    "\20\24\4\0\1\24\22\0\25\24\1\223\16\24\4\0"+
    "\1\24\22\0\1\24\1\224\42\24\4\0\1\24\22\0"+
    "\7\24\1\225\17\24\1\226\14\24\4\0\1\24\22\0"+
    "\27\24\1\227\14\24\4\0\1\24\22\0\2\24\1\230"+
    "\41\24\1\0\73\231\2\0\1\147\34\0\2\151\3\0"+
    "\1\151\5\0\1\151\22\0\1\147\34\0\2\55\3\0"+
    "\1\55\5\0\1\55\23\0\1\152\27\0\1\61\3\0"+
    "\2\152\3\0\1\152\2\0\1\61\2\0\1\152\5\0"+
    "\1\61\15\0\1\152\33\0\2\152\3\0\1\152\5\0"+
    "\1\152\20\0\24\64\1\154\1\6\45\64\3\0\1\24"+
    "\22\0\4\24\1\232\37\24\4\0\1\24\22\0\22\24"+
    "\1\233\21\24\4\0\1\24\22\0\26\24\1\234\15\24"+
    "\4\0\1\24\22\0\10\24\1\127\33\24\4\0\1\24"+
    "\22\0\3\24\1\235\40\24\4\0\1\24\22\0\4\24"+
    "\1\127\37\24\4\0\1\24\22\0\41\24\1\127\2\24"+
    "\4\0\1\24\22\0\4\24\1\236\37\24\4\0\1\24"+
    "\22\0\10\24\1\155\33\24\4\0\1\24\22\0\6\24"+
    "\1\126\35\24\4\0\1\24\22\0\6\24\1\237\35\24"+
    "\4\0\1\24\22\0\4\24\1\177\37\24\4\0\1\24"+
    "\22\0\1\24\1\240\42\24\4\0\1\24\22\0\35\24"+
    "\1\127\6\24\4\0\1\24\22\0\27\24\1\241\14\24"+
    "\4\0\1\24\22\0\1\24\1\242\42\24\4\0\1\24"+
    "\22\0\4\24\1\76\37\24\4\0\1\24\22\0\1\24"+
    "\1\207\42\24\4\0\1\24\22\0\2\24\1\126\41\24"+
    "\4\0\1\24\22\0\25\24\1\243\16\24\4\0\1\201"+
    "\26\0\3\201\1\62\1\0\2\201\1\0\3\201\1\62"+
    "\2\201\1\0\3\201\4\0\1\201\47\0\1\62\1\0"+
    "\1\202\4\0\1\202\1\62\30\0\1\24\22\0\7\24"+
    "\1\244\34\24\4\0\1\24\22\0\27\24\1\245\14\24"+
    "\4\0\1\24\22\0\6\24\1\246\35\24\4\0\1\24"+
    "\22\0\7\24\1\247\34\24\4\0\1\24\22\0\25\24"+
    "\1\250\16\24\4\0\1\24\22\0\10\24\1\160\33\24"+
    "\4\0\1\24\22\0\1\24\1\251\6\24\1\126\33\24"+
    "\4\0\1\24\22\0\4\24\1\252\37\24\4\0\1\24"+
    "\22\0\1\24\1\253\42\24\4\0\1\24\22\0\7\24"+
    "\1\254\16\24\1\177\15\24\4\0\1\24\22\0\7\24"+
    "\1\162\34\24\4\0\1\24\22\0\6\24\1\255\35\24"+
    "\4\0\1\24\22\0\23\24\1\215\20\24\4\0\1\24"+
    "\22\0\1\24\1\256\42\24\4\0\1\24\22\0\40\24"+
    "\1\257\3\24\4\0\1\24\22\0\7\24\1\242\34\24"+
    "\4\0\1\24\22\0\34\24\1\260\7\24\4\0\1\24"+
    "\22\0\26\24\1\127\15\24\4\0\1\24\22\0\6\24"+
    "\1\261\35\24\4\0\1\24\22\0\32\24\1\127\11\24"+
    "\4\0\1\24\22\0\22\24\1\127\21\24\4\0\1\24"+
    "\22\0\27\24\1\102\14\24\2\0\1\262\74\0\1\24"+
    "\22\0\10\24\1\263\33\24\4\0\1\24\22\0\30\24"+
    "\1\264\13\24\4\0\1\24\22\0\2\24\1\227\41\24"+
    "\4\0\1\24\22\0\22\24\1\265\21\24\4\0\1\24"+
    "\22\0\7\24\1\266\34\24\4\0\1\24\22\0\2\24"+
    "\1\267\41\24\4\0\1\24\22\0\25\24\1\270\16\24"+
    "\4\0\1\24\22\0\27\24\1\271\14\24\4\0\1\24"+
    "\22\0\31\24\1\272\12\24\4\0\1\24\22\0\40\24"+
    "\1\162\3\24\4\0\1\24\22\0\34\24\1\127\7\24"+
    "\4\0\1\24\22\0\4\24\1\273\37\24\4\0\1\24"+
    "\22\0\31\24\1\127\12\24\4\0\1\24\22\0\27\24"+
    "\1\274\14\24\4\0\1\24\22\0\2\24\1\275\41\24"+
    "\4\0\1\24\22\0\6\24\1\276\35\24\4\0\1\24"+
    "\22\0\4\24\1\277\37\24\4\0\1\24\22\0\3\24"+
    "\1\300\40\24\4\0\1\24\22\0\4\24\1\301\37\24"+
    "\4\0\1\24\22\0\6\24\1\121\35\24\4\0\1\24"+
    "\22\0\6\24\1\302\35\24\4\0\1\24\22\0\1\24"+
    "\1\132\42\24\2\0\1\303\74\0\1\24\22\0\27\24"+
    "\1\304\14\24\4\0\1\24\22\0\32\24\1\160\11\24"+
    "\4\0\1\24\22\0\7\24\1\305\34\24\4\0\1\24"+
    "\22\0\6\24\1\306\35\24\4\0\1\24\22\0\1\24"+
    "\1\307\42\24\4\0\1\24\22\0\25\24\1\127\16\24"+
    "\4\0\1\24\22\0\2\24\1\310\41\24\4\0\1\24"+
    "\22\0\6\24\1\227\35\24\4\0\1\24\22\0\22\24"+
    "\1\311\21\24\4\0\1\24\22\0\5\24\1\312\36\24"+
    "\4\0\1\24\22\0\22\24\1\313\21\24\4\0\1\24"+
    "\22\0\41\24\1\314\2\24\4\0\1\24\22\0\7\24"+
    "\1\126\34\24\4\0\1\24\22\0\25\24\1\315\16\24"+
    "\4\0\1\24\22\0\35\24\1\162\6\24\2\0\1\316"+
    "\74\0\1\24\22\0\4\24\1\317\37\24\4\0\1\24"+
    "\22\0\36\24\1\127\5\24\4\0\1\24\22\0\25\24"+
    "\1\126\16\24\4\0\1\24\22\0\5\24\1\320\36\24"+
    "\4\0\1\24\22\0\26\24\1\321\15\24\4\0\1\24"+
    "\22\0\3\24\1\162\40\24\4\0\1\24\22\0\6\24"+
    "\1\322\35\24\4\0\1\24\22\0\25\24\1\323\16\24"+
    "\4\0\1\24\22\0\4\24\1\324\37\24\4\0\1\24"+
    "\22\0\1\24\1\325\42\24\4\0\1\24\22\0\22\24"+
    "\1\126\21\24\4\0\1\24\22\0\33\24\1\127\10\24"+
    "\4\0\1\24\22\0\22\24\1\326\21\24\4\0\1\24"+
    "\22\0\25\24\1\162\16\24\4\0\1\24\22\0\4\24"+
    "\1\327\37\24\4\0\1\24\22\0\22\24\1\330\21\24"+
    "\4\0\1\24\22\0\4\24\1\226\37\24\4\0\1\24"+
    "\22\0\27\24\1\331\14\24\4\0\1\24\22\0\26\24"+
    "\1\332\15\24\4\0\1\24\22\0\1\24\1\160\42\24"+
    "\4\0\1\24\22\0\37\24\1\325\4\24\4\0\1\24"+
    "\22\0\5\24\1\127\36\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\5\1\1\11"+
    "\33\1\1\0\1\1\3\0\1\1\1\0\2\11\2\0"+
    "\23\1\1\0\1\1\2\0\30\1\2\11\1\0\1\11"+
    "\2\0\1\1\2\0\54\1\1\0\30\1\1\0\20\1"+
    "\1\0\12\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  javaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  javaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaTokens nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return new JavaTokens(TokenKind.TextBlock,"",yytext());
          }
        case 15: break;
        case 12: 
          { return  new JavaTokens(TokenKind.BooleanLiteral,"",yytext());
          }
        case 16: break;
        case 4: 
          { return  new JavaTokens(TokenKind.Separator,"",yytext());
          }
        case 17: break;
        case 1: 
          { return  new JavaTokens(TokenKind.Unknown);
          }
        case 18: break;
        case 10: 
          { return  new JavaTokens(TokenKind.AMPERSAND,"nothing","&");
          }
        case 19: break;
        case 2: 
          { return  new JavaTokens(TokenKind.INTEGERLIT,"nothing",yytext());
          }
        case 20: break;
        case 7: 
          { return  new JavaTokens(TokenKind.STRINGLIT,"",yytext());
          }
        case 21: break;
        case 5: 
          { return  new JavaTokens(TokenKind.Operator,"",yytext());
          }
        case 22: break;
        case 11: 
          { return  new JavaTokens(TokenKind.CHARLIT,"",yytext());
          }
        case 23: break;
        case 9: 
          { return  new JavaTokens(TokenKind.keyword,"",yytext());
          }
        case 24: break;
        case 6: 
          { return  new JavaTokens(TokenKind.IDENT,"nothing",yytext());
          }
        case 25: break;
        case 8: 
          { return  new JavaTokens(TokenKind.FLOATLIT,"nothing",yytext() );
          }
        case 26: break;
        case 13: 
          { return  new JavaTokens(TokenKind.NULLLIT,"nothing","null");
          }
        case 27: break;
        case 3: 
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return  new JavaTokens(TokenKind.EndFile);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
