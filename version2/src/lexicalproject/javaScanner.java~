/* The following code was generated by JFlex 1.4.3 on 11/25/21 2:53 PM */

    //=>Definitions
    package lexicalproject;
    import static lexicalproject.JavaTokens.*;
    import java.util.Hashtable;
    import java.util.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/25/21 2:53 PM from the specification file
 * <tt>C:/Users/Adnan.DESKTOP-DBG87M9/Documents/NetBeansProjects/LexicalProject/src/lexicalproject/Lexical.flex</tt>
 */
class javaScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\10\1\0\1\6\1\11\22\0\1\7\1\20\1\1"+
    "\1\0\1\30\1\20\1\23\1\2\1\12\1\12\1\26\1\25\1\12"+
    "\1\22\1\13\1\27\1\42\1\47\2\55\4\43\2\4\1\14\1\12"+
    "\1\17\1\15\1\16\1\21\1\12\1\45\1\46\1\45\1\52\1\51"+
    "\1\52\5\31\1\50\6\31\1\74\4\31\1\44\2\31\1\12\1\5"+
    "\1\12\1\20\1\30\1\0\1\37\1\54\1\56\1\63\1\35\1\36"+
    "\1\66\1\62\1\60\1\31\1\65\1\40\1\72\1\53\1\57\1\64"+
    "\1\31\1\33\1\41\1\32\1\34\1\71\1\61\1\73\1\67\1\70"+
    "\1\12\1\24\1\12\1\21\1\0\u0329\3\1\3\u1c7c\3\1\75\u7fd9\3"+
    "\u5fff\0\1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\1\2\3\2\4\12\5\10\6"+
    "\1\2\14\6\1\1\1\0\1\7\3\0\1\10\1\0"+
    "\1\10\1\2\3\0\1\3\22\6\1\0\1\2\2\0"+
    "\13\6\1\11\4\6\1\11\7\6\1\12\1\7\1\0"+
    "\1\13\2\0\1\10\3\0\24\6\2\2\7\6\1\11"+
    "\16\6\2\0\1\14\11\6\1\15\15\6\2\0\1\6"+
    "\1\11\1\6\1\11\14\6\1\16\1\17\12\6\1\16"+
    "\7\6\1\16\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\u0174"+
    "\0\76\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\76\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\76\0\76\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u041e\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\76\0\76\0\u1702"+
    "\0\76\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u041e\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u041e"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8"+
    "\0\u196e\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\76\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\76\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\14\1\17"+
    "\1\20\1\21\1\22\1\23\1\14\1\24\2\25\1\26"+
    "\1\27\1\25\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\5\3\25\1\5\3\25\1\36\1\37\1\5\1\40"+
    "\1\41\1\42\1\43\1\25\1\44\1\45\1\25\1\46"+
    "\2\25\1\47\1\50\1\25\1\51\1\52\76\0\1\53"+
    "\1\54\3\53\1\55\2\53\2\0\64\53\2\56\1\0"+
    "\2\56\1\57\2\56\2\0\64\56\4\0\1\5\6\0"+
    "\1\60\21\0\1\61\1\62\1\0\1\63\1\0\2\5"+
    "\3\0\1\5\1\63\1\61\1\62\2\0\1\5\5\0"+
    "\1\62\46\0\1\64\51\0\1\7\71\0\1\60\6\0"+
    "\1\65\26\0\2\60\3\0\1\60\5\0\1\60\34\0"+
    "\1\11\1\17\75\0\1\17\75\0\2\17\74\0\1\17"+
    "\1\0\1\17\73\0\2\17\3\0\1\17\70\0\1\17"+
    "\5\0\1\17\67\0\1\17\6\0\1\17\66\0\1\17"+
    "\7\0\1\17\65\0\1\17\10\0\1\66\1\67\52\0"+
    "\1\25\23\0\45\25\5\0\1\25\23\0\3\25\1\70"+
    "\26\25\1\71\12\25\5\0\1\25\23\0\5\25\1\72"+
    "\37\25\5\0\1\25\23\0\10\25\1\73\12\25\1\74"+
    "\17\25\1\75\1\25\5\0\1\25\23\0\7\25\1\76"+
    "\1\77\16\25\1\100\1\101\14\25\5\0\1\25\23\0"+
    "\11\25\1\102\12\25\1\103\20\25\5\0\1\25\23\0"+
    "\27\25\1\104\15\25\5\0\1\25\23\0\2\25\1\105"+
    "\1\25\1\106\24\25\1\107\1\110\4\25\1\111\5\25"+
    "\5\0\1\112\6\0\1\60\21\0\1\61\1\62\1\0"+
    "\1\63\1\0\2\113\1\114\1\0\1\115\1\113\1\63"+
    "\1\61\1\62\1\0\1\115\1\113\5\0\1\62\7\0"+
    "\1\114\6\0\1\25\23\0\4\25\1\116\1\117\1\25"+
    "\1\120\35\25\5\0\1\25\23\0\3\25\1\121\23\25"+
    "\1\122\7\25\1\123\5\25\5\0\1\25\23\0\7\25"+
    "\1\124\1\125\16\25\1\126\2\25\1\127\12\25\5\0"+
    "\1\25\23\0\4\25\1\130\40\25\5\0\1\25\23\0"+
    "\6\25\1\131\14\25\1\132\16\25\1\133\2\25\5\0"+
    "\1\25\23\0\32\25\1\134\12\25\5\0\1\25\23\0"+
    "\5\25\1\135\21\25\1\136\15\25\5\0\1\25\23\0"+
    "\3\25\1\137\1\140\2\25\1\141\35\25\5\0\1\25"+
    "\23\0\27\25\1\142\15\25\5\0\1\25\23\0\27\25"+
    "\1\143\15\25\5\0\1\25\23\0\7\25\1\144\35\25"+
    "\5\0\1\25\23\0\2\25\1\145\42\25\24\0\1\146"+
    "\52\0\1\53\1\147\3\53\1\55\2\53\2\0\64\53"+
    "\1\0\1\150\75\0\2\53\2\0\1\53\24\0\2\53"+
    "\2\0\1\53\3\0\2\53\3\0\1\53\3\0\3\53"+
    "\22\0\1\151\74\0\2\56\2\0\1\56\24\0\2\56"+
    "\2\0\1\56\3\0\1\152\1\153\3\0\1\152\3\0"+
    "\2\56\1\152\24\0\1\60\30\0\1\61\1\62\3\0"+
    "\2\60\3\0\1\60\1\0\1\61\1\62\2\0\1\60"+
    "\5\0\1\62\16\0\1\154\15\0\1\155\2\0\1\155"+
    "\14\0\2\154\3\0\1\154\5\0\1\154\23\0\2\156"+
    "\2\0\1\156\21\0\45\156\13\0\1\11\62\0\26\66"+
    "\1\157\47\66\10\67\2\0\64\67\4\0\1\25\23\0"+
    "\4\25\1\160\2\25\1\161\27\25\1\131\5\25\5\0"+
    "\1\25\23\0\3\25\1\162\24\25\1\163\14\25\5\0"+
    "\1\25\23\0\2\25\1\164\42\25\5\0\1\25\23\0"+
    "\11\25\1\165\33\25\5\0\1\25\23\0\4\25\1\166"+
    "\40\25\5\0\1\25\23\0\2\25\1\167\42\25\5\0"+
    "\1\25\23\0\10\25\1\170\34\25\5\0\1\25\23\0"+
    "\27\25\1\171\15\25\5\0\1\25\23\0\3\25\1\131"+
    "\41\25\5\0\1\25\23\0\23\25\1\172\21\25\5\0"+
    "\1\25\23\0\11\25\1\173\33\25\5\0\1\25\23\0"+
    "\11\25\1\174\33\25\5\0\1\25\23\0\23\25\1\175"+
    "\21\25\5\0\1\25\23\0\3\25\1\176\3\25\1\177"+
    "\35\25\5\0\1\25\23\0\34\25\1\200\10\25\5\0"+
    "\1\25\23\0\30\25\1\201\14\25\5\0\1\25\23\0"+
    "\27\25\1\202\15\25\5\0\1\25\23\0\23\25\1\203"+
    "\21\25\5\0\1\112\6\0\1\60\21\0\1\61\1\62"+
    "\3\0\2\112\3\0\1\112\1\0\1\61\1\62\2\0"+
    "\1\112\5\0\1\62\16\0\1\112\6\0\1\60\21\0"+
    "\1\61\1\62\1\0\1\63\1\0\2\113\3\0\1\113"+
    "\1\63\1\61\1\62\2\0\1\113\5\0\1\62\16\0"+
    "\1\204\30\0\3\204\2\0\2\204\1\0\3\204\1\0"+
    "\2\204\1\0\3\204\4\0\1\204\54\0\1\205\4\0"+
    "\1\205\32\0\1\25\23\0\10\25\1\206\34\25\5\0"+
    "\1\25\23\0\31\25\1\131\13\25\5\0\1\25\23\0"+
    "\2\25\1\207\42\25\5\0\1\25\23\0\5\25\1\210"+
    "\37\25\5\0\1\25\23\0\27\25\1\211\15\25\5\0"+
    "\1\25\23\0\2\25\1\165\42\25\5\0\1\25\23\0"+
    "\2\25\1\212\6\25\1\165\33\25\5\0\1\25\23\0"+
    "\7\25\1\213\35\25\5\0\1\25\23\0\23\25\1\214"+
    "\21\25\5\0\1\25\23\0\7\25\1\100\35\25\5\0"+
    "\1\25\23\0\2\25\1\131\42\25\5\0\1\25\23\0"+
    "\2\25\1\215\6\25\1\216\33\25\5\0\1\25\23\0"+
    "\34\25\1\217\10\25\5\0\1\25\23\0\30\25\1\220"+
    "\14\25\5\0\1\25\23\0\6\25\1\221\36\25\5\0"+
    "\1\25\23\0\4\25\1\222\40\25\5\0\1\25\23\0"+
    "\27\25\1\223\1\224\14\25\5\0\1\25\23\0\24\25"+
    "\1\225\20\25\5\0\1\25\23\0\26\25\1\226\16\25"+
    "\5\0\1\25\23\0\2\25\1\227\42\25\5\0\1\25"+
    "\23\0\10\25\1\230\17\25\1\231\14\25\5\0\1\25"+
    "\23\0\30\25\1\232\14\25\5\0\1\25\23\0\3\25"+
    "\1\233\41\25\1\0\1\150\1\234\74\150\2\0\1\151"+
    "\37\0\2\153\3\0\1\153\5\0\1\153\22\0\1\151"+
    "\37\0\2\56\3\0\1\56\5\0\1\56\24\0\1\154"+
    "\31\0\1\62\3\0\2\154\3\0\1\154\2\0\1\62"+
    "\2\0\1\154\5\0\1\62\16\0\1\154\35\0\2\154"+
    "\3\0\1\154\5\0\1\154\23\0\2\235\2\0\1\235"+
    "\21\0\45\235\26\66\1\157\1\7\46\66\4\0\1\25"+
    "\23\0\5\25\1\236\37\25\5\0\1\25\23\0\23\25"+
    "\1\237\21\25\5\0\1\25\23\0\27\25\1\240\15\25"+
    "\5\0\1\25\23\0\11\25\1\131\33\25\5\0\1\25"+
    "\23\0\4\25\1\241\40\25\5\0\1\25\23\0\5\25"+
    "\1\131\37\25\5\0\1\25\23\0\42\25\1\131\2\25"+
    "\5\0\1\25\23\0\5\25\1\242\37\25\5\0\1\25"+
    "\23\0\11\25\1\160\33\25\5\0\1\25\23\0\7\25"+
    "\1\130\35\25\5\0\1\25\23\0\7\25\1\243\35\25"+
    "\5\0\1\25\23\0\5\25\1\202\37\25\5\0\1\25"+
    "\23\0\2\25\1\244\42\25\5\0\1\25\23\0\36\25"+
    "\1\131\6\25\5\0\1\25\23\0\30\25\1\245\14\25"+
    "\5\0\1\25\23\0\2\25\1\246\42\25\5\0\1\25"+
    "\23\0\5\25\1\100\37\25\5\0\1\25\23\0\2\25"+
    "\1\212\42\25\5\0\1\25\23\0\3\25\1\130\41\25"+
    "\5\0\1\25\23\0\26\25\1\247\16\25\5\0\1\204"+
    "\30\0\3\204\1\63\1\0\2\204\1\0\3\204\1\63"+
    "\2\204\1\0\3\204\4\0\1\204\52\0\1\63\1\0"+
    "\1\205\4\0\1\205\1\63\31\0\1\25\23\0\10\25"+
    "\1\250\34\25\5\0\1\25\23\0\30\25\1\251\14\25"+
    "\5\0\1\25\23\0\7\25\1\252\35\25\5\0\1\25"+
    "\23\0\10\25\1\253\34\25\5\0\1\25\23\0\26\25"+
    "\1\254\16\25\5\0\1\25\23\0\11\25\1\163\33\25"+
    "\5\0\1\25\23\0\2\25\1\255\6\25\1\130\33\25"+
    "\5\0\1\25\23\0\5\25\1\256\37\25\5\0\1\25"+
    "\23\0\2\25\1\257\42\25\5\0\1\25\23\0\10\25"+
    "\1\260\16\25\1\202\15\25\5\0\1\25\23\0\10\25"+
    "\1\165\34\25\5\0\1\25\23\0\7\25\1\261\35\25"+
    "\5\0\1\25\23\0\24\25\1\220\20\25\5\0\1\25"+
    "\23\0\2\25\1\262\42\25\5\0\1\25\23\0\41\25"+
    "\1\263\3\25\5\0\1\25\23\0\10\25\1\246\34\25"+
    "\5\0\1\25\23\0\35\25\1\264\7\25\5\0\1\25"+
    "\23\0\27\25\1\131\15\25\5\0\1\25\23\0\7\25"+
    "\1\265\35\25\5\0\1\25\23\0\33\25\1\131\11\25"+
    "\5\0\1\25\23\0\23\25\1\131\21\25\5\0\1\25"+
    "\23\0\30\25\1\104\14\25\1\0\1\150\1\266\74\150"+
    "\3\0\2\267\2\0\1\267\21\0\45\267\4\0\1\25"+
    "\23\0\11\25\1\270\33\25\5\0\1\25\23\0\31\25"+
    "\1\271\13\25\5\0\1\25\23\0\3\25\1\232\41\25"+
    "\5\0\1\25\23\0\23\25\1\272\21\25\5\0\1\25"+
    "\23\0\10\25\1\273\34\25\5\0\1\25\23\0\3\25"+
    "\1\274\41\25\5\0\1\25\23\0\26\25\1\275\16\25"+
    "\5\0\1\25\23\0\30\25\1\276\14\25\5\0\1\25"+
    "\23\0\32\25\1\277\12\25\5\0\1\25\23\0\41\25"+
    "\1\165\3\25\5\0\1\25\23\0\35\25\1\131\7\25"+
    "\5\0\1\25\23\0\5\25\1\300\37\25\5\0\1\25"+
    "\23\0\32\25\1\131\12\25\5\0\1\25\23\0\30\25"+
    "\1\301\14\25\5\0\1\25\23\0\3\25\1\302\41\25"+
    "\5\0\1\25\23\0\7\25\1\303\35\25\5\0\1\25"+
    "\23\0\5\25\1\304\37\25\5\0\1\25\23\0\4\25"+
    "\1\305\40\25\5\0\1\25\23\0\5\25\1\306\37\25"+
    "\5\0\1\25\23\0\7\25\1\123\35\25\5\0\1\25"+
    "\23\0\7\25\1\307\35\25\5\0\1\25\23\0\2\25"+
    "\1\134\42\25\1\0\1\150\1\310\74\150\3\0\2\311"+
    "\2\0\1\311\21\0\45\311\4\0\1\25\23\0\30\25"+
    "\1\312\14\25\5\0\1\25\23\0\33\25\1\163\11\25"+
    "\5\0\1\25\23\0\10\25\1\313\34\25\5\0\1\25"+
    "\23\0\7\25\1\314\35\25\5\0\1\25\23\0\2\25"+
    "\1\315\42\25\5\0\1\25\23\0\26\25\1\131\16\25"+
    "\5\0\1\25\23\0\3\25\1\316\41\25\5\0\1\25"+
    "\23\0\7\25\1\232\35\25\5\0\1\25\23\0\23\25"+
    "\1\317\21\25\5\0\1\25\23\0\6\25\1\320\36\25"+
    "\5\0\1\25\23\0\23\25\1\321\21\25\5\0\1\25"+
    "\23\0\42\25\1\322\2\25\5\0\1\25\23\0\10\25"+
    "\1\130\34\25\5\0\1\25\23\0\26\25\1\323\16\25"+
    "\5\0\1\25\23\0\36\25\1\165\6\25\2\0\1\324"+
    "\100\0\1\25\23\0\5\25\1\325\37\25\5\0\1\25"+
    "\23\0\37\25\1\131\5\25\5\0\1\25\23\0\26\25"+
    "\1\130\16\25\5\0\1\25\23\0\6\25\1\326\36\25"+
    "\5\0\1\25\23\0\27\25\1\327\15\25\5\0\1\25"+
    "\23\0\4\25\1\165\40\25\5\0\1\25\23\0\7\25"+
    "\1\330\35\25\5\0\1\25\23\0\26\25\1\331\16\25"+
    "\5\0\1\25\23\0\5\25\1\332\37\25\5\0\1\25"+
    "\23\0\2\25\1\333\42\25\2\0\1\334\100\0\1\25"+
    "\23\0\23\25\1\130\21\25\5\0\1\25\23\0\34\25"+
    "\1\131\10\25\5\0\1\25\23\0\23\25\1\335\21\25"+
    "\5\0\1\25\23\0\26\25\1\165\16\25\5\0\1\25"+
    "\23\0\5\25\1\336\37\25\5\0\1\25\23\0\23\25"+
    "\1\337\21\25\5\0\1\25\23\0\5\25\1\231\37\25"+
    "\5\0\1\25\23\0\30\25\1\340\14\25\5\0\1\25"+
    "\23\0\27\25\1\341\15\25\5\0\1\25\23\0\2\25"+
    "\1\163\42\25\5\0\1\25\23\0\40\25\1\333\4\25"+
    "\5\0\1\25\23\0\6\25\1\131\36\25\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13082];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\5\1\1\11"+
    "\33\1\1\0\1\1\3\0\1\1\1\0\2\11\3\0"+
    "\23\1\1\0\1\1\2\0\30\1\2\11\1\0\1\11"+
    "\2\0\1\1\3\0\54\1\2\0\30\1\2\0\21\1"+
    "\1\11\22\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  javaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  javaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaTokens nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return new JavaTokens(TokenKind.TextBlock,"",yytext());
          }
        case 16: break;
        case 12: 
          { return  new JavaTokens(TokenKind.BooleanLiteral,"",yytext());
          }
        case 17: break;
        case 4: 
          { return  new JavaTokens(TokenKind.Separator,"",yytext());
          }
        case 18: break;
        case 1: 
          { return  new JavaTokens(TokenKind.Unknown);
          }
        case 19: break;
        case 10: 
          { return  new JavaTokens(TokenKind.AMPERSAND,"nothing","&");
          }
        case 20: break;
        case 2: 
          { return  new JavaTokens(TokenKind.INTEGERLIT,"nothing",yytext());
          }
        case 21: break;
        case 7: 
          { return  new JavaTokens(TokenKind.STRINGLIT,"",yytext());
          }
        case 22: break;
        case 5: 
          { return  new JavaTokens(TokenKind.Operator,"",yytext());
          }
        case 23: break;
        case 11: 
          { return  new JavaTokens(TokenKind.CHARLIT,"",yytext());
          }
        case 24: break;
        case 9: 
          { return  new JavaTokens(TokenKind.keyword,"",yytext());
          }
        case 25: break;
        case 15: 
          { return  new JavaTokens(TokenKind.uniDigit,"",yytext());
          }
        case 26: break;
        case 6: 
          { return  new JavaTokens(TokenKind.IDENT,"nothing",yytext());
          }
        case 27: break;
        case 8: 
          { return  new JavaTokens(TokenKind.FLOATLIT,"nothing",yytext() );
          }
        case 28: break;
        case 13: 
          { return  new JavaTokens(TokenKind.NULLLIT,"nothing","null");
          }
        case 29: break;
        case 3: 
          { 
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return  new JavaTokens(TokenKind.EndFile);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
